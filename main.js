const  { Telegraf } = require("telegraf");
const Extra = require("telegraf/extra");
const { Markup } = require("telegraf/extra");
const ini = require("ini");
const  fs = require("fs");

const  { DatabaseController } = require("./Contollers/DatabaseController");
const MessagesController =  require("./Contollers/MessagesController");
const { QiWiController } = require("./Contollers/PaymentsControllers");
const { Validator, AskHandler} = require("./Helpers/RequestBuildHelpers");
const { getData } = require("./Helpers/RequestHandler");

const { dependencies } = ini.parse(fs.readFileSync("./bot_config.ini", "utf-8"));

const bot = new Telegraf(dependencies.TOKEN);
const qiwiWallet = new QiWiController(dependencies.QIWI_TOKEN, dependencies.PHONE_NUMBER, dependencies.PAYMENT, bot.telegram);
const database = new DatabaseController(dependencies.DATABASE_ADDRESS);
const messages = new MessagesController();
const askHandler = new AskHandler(bot.telegram);
const validator = new Validator();

bot.start(async (ctx) => {
    let user = await database.getUser(ctx.from.id);
    if (!user) {
        user = database.createUser(ctx.from.id);
    }
    if (!user.hasPaid) {
        messages.sendPaymentOffer(ctx);
        return;
    } else {
        await database.clearUserRequest(user);
        ctx.reply("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", Extra.markup(m => m.inlineKeyboard([m.callbackButton("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üìù", "buildRequest")])));
    }
});

// –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã
bot.hears("QiWi üí∏", async (ctx) => {
    let randomPhrase = messages.chooseRandomPhrase();
    const userPayment = await database.findPayment(ctx.from.id);
    const paidUser = await database.getUser(ctx.from.id);
    if (paidUser && paidUser.hasPaid) {
        messages.sendAlreadyPaidAlert(ctx);
        return;
    } else {
        await database.createUser(ctx.from.id);
    }
    if (userPayment) {
        const instruction = messages.generateInstruction("QiWi", userPayment.comment, dependencies.PHONE_NUMBER, dependencies.PAYMENT);
        ctx.reply(instruction, {parse_mode: "HTML", reply_markup: { remove_keyboard: true } });
        return; 
    }
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ—Ç–≤–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ 
    for (let i = 1; i <= 5; i++) {
        if (i == 5) {
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø—è—Ç—å –º–∏–Ω—É—Ç");
            return;
        }
        randomPhrase = messages.chooseRandomPhrase();
        const isSaved = await  database.addNewPayment(ctx.from.id, randomPhrase);
        if (!isSaved) continue;
        else break;
    }
    const instruction =  messages.generateInstruction("QiWi", randomPhrase, dependencies.PHONE_NUMBER, dependencies.PAYMENT);
    ctx.reply(instruction, {parse_mode: "HTML", reply_markup: { remove_keyboard: true } });
});
bot.hears("–Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞ üíµ", async (ctx) => {
    const user = await database.getUser(ctx.from.id);
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–∞–ª—Ç–∏–ª 
    if (user && user.hasPaid) {
        messages.sendAlreadyPaidAlert(ctx);
        return;
    }
    const phrase = messages.chooseRandomPhrase();
    const userInstruction = messages.generateInstruction("–Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞", phrase, dependencies.YANDEX_WALLET, dependencies.PAYMENT, false);
    const adminInstruction = messages.generateAdminInstruction("–Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞", phrase, dependencies.PAYMENT);

    messages.sendPaymentNotification(ctx.from.id, dependencies.ADMIN_ID, userInstruction, adminInstruction, bot.telegram);
});
bot.hears("–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω üí≥", async (ctx) => {
    const user = await database.getUser(ctx.from.id);
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–∞–ª—Ç–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    if (user && user.hasPaid) {
        messages.sendAlreadyPaidAlert(ctx);
        return;
    }
    const phrase = messages.chooseRandomPhrase();
    const userInstruction = messages.generateInstruction("C–±–µ—Ä–±–∞–Ω–∫", phrase, dependencies.SBERBANK_CARD, dependencies.PAYMENT);
    const adminInstruction = messages.generateAdminInstruction("–°–±–µ—Ä–±–∞–Ω–∫", phrase, dependencies.PAYMENT);

    messages.sendPaymentNotification(ctx.from.id, dependencies.ADMIN_ID, userInstruction, adminInstruction, bot.telegram);
});
bot.hears("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", (ctx) => {
    startQuestions(ctx);
});
bot.hears("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è",  async (ctx) => {
    const user = await database.getUser(ctx.from.id);
    if ( user.currentQuestion == 10) {
        await database.saveByQuestionNumber(user, null);
        messages.generatePreRequestQuestion(user.request, ctx);
        return;
    }
    await database.saveByQuestionNumber(user, null);
    askHandler.askQuestion(user.currentQuestion, ctx.from.id);
});
bot.hears("–ù–∞–π—Ç–∏ üîç", async (ctx) => {
    const  user = await database.getUser(ctx.from.id);
    let gotResults = await getData(user.request, ctx, dependencies.API_TOKEN);
    if (gotResults) {
        await database.clearUser(user);
        await ctx.reply("‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞, –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑. ‚ö†Ô∏è", { reply_markup: { remove_keyboard: true }});
        messages.sendPaymentOffer(ctx);
        return;
    }
    ctx.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –±—ã–ª –Ω–µ—É–¥–∞—á–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.", Extra.HTML().markup(m => m.inlineKeyboard([m.callbackButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", "buildRequest")])));
});
bot.on("text", async (ctx) => {
    let user = await database.getUser(ctx.from.id);
    if (!user) {
        user = await database.createUser(ctx.from.id);
    }
    if (!user.hasPaid) {
        messages.sendPaymentOffer(ctx);
        return; 
    }
    if (user.currentQuestion == 11) {
        messages.generatePreRequestQuestion(user.request, ctx);
        return;
    }
    if (user.hasPaid) {
        // handling last question
        const type = validator.getType(user.currentQuestion);
        const result = validator.validate(type, ctx.message.text);
        if (result.success != true) {
            ctx.reply(result.message);
            return
        }
        await database.saveByQuestionNumber(user, ctx.message.text);
        if (user.currentQuestion == 11) {
            messages.generatePreRequestQuestion(user.request, ctx);
            return;
        }
        askHandler.askQuestion(user.currentQuestion, ctx.from.id);
    }
});


// handling callbacks 
bot.on("callback_query", async (ctx) => {
    if(ctx.callbackQuery.data.startsWith("verify")) {
        const verifiedUserId = ctx.callbackQuery.data.split(" ")[1];
        let user = await database.getUser(verifiedUserId);
        if (!user) {
            await database.createUser(verifiedUserId);
            user = await database.getUser(verifiedUserId);
        }
        let { username } = await bot.telegram.getChat(verifiedUserId);
        ctx.editMessageText("–û–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + username + " –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚úÖ");
        ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.");
        user.hasPaid = true;
        await database.update(user);
        bot.telegram.sendMessage(verifiedUserId, "–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. ‚úÖ", Extra.HTML().markup(m => m.inlineKeyboard([m.callbackButton("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üìù", "buildRequest")])));
    }
    if(ctx.callbackQuery.data == 'buildRequest') {
        ctx.deleteMessage()
        startQuestions(ctx);
    }
});
async function startQuestions (ctx) {
    const user = await database.getUser(ctx.from.id);
    if (!user) {
        await database.createUser(ctx.from.id);
        messages.sendPaymentOffer(ctx);
        return;
    }
    if (!user.hasPaid) {
        messages.sendPaymentOffer(ctx);
        return;
    }
    if (user.request) {
       await database.clearUserRequest(user);
    }
    await ctx.reply("<b>–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø—Ä–æ–∏–≤–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫.</b>\n\n<i>–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</i>", Extra.HTML());
    askHandler.askQuestion(user.currentQuestion, ctx.from.id)
}
async function launchBot() {
    try {
        console.log("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");

        database.connect();
        await bot.launch();
        
        console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    
    } catch (e) {
        console.log("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: " + e);
    }
}
launchBot();