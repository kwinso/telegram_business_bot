const Markup = require('telegraf/markup')
const Extra = require("telegraf/extra");

const messages = {
    paymentOffer: 
        `‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ç—Ä–µ–º—è —Å–ø–æ—Å–æ–±–∞–º–∏: <b>QiWi, –Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞, –°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, <i>–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É</i>`, 
    greeting: 
        `üóÑ–ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–†–û–¢–û–ö–û–õ | IAS_PROTOCOL üóÉ\n` + 
        `üëâüèª –î–ª—è –∫–æ–≥–æ:\nüìç–Æ—Ä–∏—Å—Ç–æ–≤;\nüìç–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ë;\nüìç–ß–∞—Å—Ç–Ω—ã—Ö –î–µ—Ç–µ–∫—Ç–∏–≤–æ–≤;\nüìç–•–∞–∫–µ—Ä–æ–≤;\nüìç–°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤;\n\n` +
        `üëâüèª –ß—Ç–æ –º–æ–∂–µ—Ç:\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –Ω–µ–ø–æ–ª–Ω—ã–º –¥–∞–Ω–Ω—ã–º;\n–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–µ–ø–æ–ª–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –∞ –∏–º–µ–Ω–Ω–æ:\n` +
        `üîé –ø–æ –ì–†–ó –∞–≤—Ç–æ;\nüîé –ò–ù–ù;\nüîé —Å–µ—Ä–∏–∏ –Ω–æ–º–µ—Ä—É –ø–∞—Å–ø–æ—Ä—Ç–∞;\nüîé –ò–º—è+–§–∞–º–∏–ª–∏—è;\nüîé –∞–¥—Ä–µ—Å—É –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è;\nüîé –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞;\nüîé –°–ù–ò–õ–°;\n\n` +
        `üìå–ö–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–æ–∏—Å–∫–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π;\nüìå–ö–æ–ª–ª–µ–∫—Ç–æ—Ä–∞–º –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤;`,
    contactsMessage:
        `–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–≤—è–∑—å –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n` +
        `<b>üìß –ü–æ—á—Ç–∞:</b>protocol.base@gmail.com\n` +  
        `<b>üì± –¢–µ–ª.:</b> +7(812)981-51-66</code>\n` +
        `<b>‚úàÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º–º:</b> @IAS_PROTOCOL\n` +
        `<b>–¢–∞–∫ –∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:</b> https://t.me/protocol_data (IAS PROTOCOL)`
}

const keyboards = {
    paymentOfferKeyboard: [["QiWi üí∏", "–Ø–Ω–¥–µ–∫—Å.–ö–∞—Å—Å–∞ üíµ", "–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω üí≥"], ["üè† –î–æ–º–æ–π"]],
    adminVerifyPayment: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ",
    startMenuButtons: [[ Markup.callbackButton("–ü–æ–∏—Å–∫ üîç / –û–ø–ª–∞—Ç–∞ üíµ", "startSearch"), Markup.callbackButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã üîñ", "contacts")]]
}


const keyPhrases = "lorem ipsum dolor sit amet consectetur adipiscing elit Integer dictum purus tellus eget finibus justo bibendum id etiam tempor vulputate libero vel malesuada dui ullamcorper at mivamus rhoncus nibh nec enim egestas egestas fusce tincidunt lorem ac iaculis maximus ante elit sollicitudin magna sit amet tincidunt neque felis ut justo".replace(",", "").replace(".", "").toLowerCase().split(" ");

module.exports = class MessagesController {
    sendPaymentOffer(cxt) {
        cxt.reply(messages.paymentOffer, Extra.HTML().markup(Markup.keyboard(keyboards.paymentOfferKeyboard).oneTime().resize())
        )
    }

    generateInstruction (method, phrase, wallet, payment) {
        method = method.split(" ")[0];
        return `–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>${method}</b> –∫–∞–∫ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n` + 
        `<b>–°—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <code>${wallet}</code>\n` + 
        `<b>–†–∞–∑–º–µ—Ä –æ–ø–ª–∞—Ç—ã:</b> <code>${payment} —Ä—É–±.</code>\n` +
        `<b>–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:</b> <code>${phrase}</code>\n\n` + 
        `<i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É, –∏–Ω–∞—á–µ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞!</i>`;
    }
    generateAdminInstruction(wallet, phrase, payment) {
        return `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫!\n` + 
        `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é <code>${wallet}</code>.\n` + 
        `<b>–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:</b> <code>${phrase}</code> .\n` + 
        `<b>–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:</b> <code>${payment}—Ä—É–±.</code>`
    }
    generatePreRequestQuestion(request, ctx) {
        const nullValueMessage = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const { 
            firstName,
            lastName,
            middleName,
            yearBirth,
            dayBirth,
            monthBirth,
            passport,
            car,
            inn,
            snils,
            telephone
        } = request;
        const message = 
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.\n` + 
            `üï¥Ô∏è <b>–§–∞–º–∏–ª–∏—è:</b> <code>${lastName || nullValueMessage}</code>\n` +
            `üï¥Ô∏è <b>–ò–º—è</b>: <code>${firstName || nullValueMessage}</code>\n` +
            `üï¥Ô∏è <b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> <code>${middleName || nullValueMessage}</code>\n` + 
            `üìÖ <b>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>${yearBirth || nullValueMessage}</code>\n` + 
            `üìÖ <b>–ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>${monthBirth || nullValueMessage}</code>\n` + 
            `üìÖ <b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>${dayBirth || nullValueMessage}</code>\n` + 
            `üìî <b>–ü–∞—Å–ø–æ—Ä—Ç –†–§:</b> <code>${passport || nullValueMessage}</code>\n` +
            `üöó <b>–ì–æ—Å. –Ω–æ–º–µ—Ä –¢–°:</b> <code>${car || nullValueMessage}</code>\n` +
            `üìÉ <b>–ò–ù–ù:</b> <code>${inn || nullValueMessage}</code>\n` +
            `üìÑ <b>–°–ù–ò–õ–°:</b> <code>${snils || nullValueMessage}</code>\n` +
            `üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${telephone || nullValueMessage}</code>`;
        try {
        ctx.reply(message, Extra.HTML().markup(Markup.keyboard([["–ù–∞–π—Ç–∏ üîç", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ"]]).resize().oneTime()));
            
        } catch (e) {
            console.error(e);
        }
    }
    sendPaymentNotification(userId, adminId, userMessage, adminMessage, bot) {
        try {
            bot.sendMessage(userId, userMessage, { parse_mode: "HTML", reply_markup: { remove_keyboard: true }});
            bot.sendMessage(adminId, adminMessage, Extra.HTML().markup(m => m.inlineKeyboard([m.callbackButton(keyboards.adminVerifyPayment, "verify " + userId)]).oneTime()));
        } catch (e) {
            console.log(e)
        }
    }
    async sendStartScreen(ctx) {
        try {
            await ctx.replyWithPhoto({ source: "./Assets/logo.png"}, Extra.markup(Markup.removeKeyboard()));
            ctx.reply(messages.greeting, Extra.markup(m => m.inlineKeyboard(keyboards.startMenuButtons)));
        } catch (e) {
            console.log(e)
        }
    }
    sendContacts(ctx) {
        ctx.reply(messages.contactsMessage, Extra.HTML().markup(Markup.keyboard(["üè† –î–æ–º–æ–π"]).resize()))
    }
    sendAlreadyPaidAlert(ctx) {
        ctx.reply("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ —Ä–∞–Ω—å—à–µ, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–∏—Å–∫ ", Extra.HTML().markup(m => m.inlineKeyboard([m.callbackButton("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üìù", "buildRequest")])));
    }
    chooseRandomPhrase() {
        return keyPhrases[Math.floor(Math.random() * keyPhrases.length)];
    }
}