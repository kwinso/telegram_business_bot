const { Extra } = require("telegraf");
const { Markup } = require("telegraf/extra");

const types = {
    namePart: {
        type: "onlyLetters",
    },
    birthPart: {
        type: "number",
        minLen: 1,
        maxLen: 2,
        headingZeroes: false
    },
    year: {
        type: "number",
        len: 4,
    },
    passport: {
        type:  "number",
        len: 10
    },
    car: {
        type: "any",
        minLen: 3,
    },
    inn: {
        type:  "number",
        len: 11
    },
    snils: {
        type:  "number",
        len: 12
    },
    telephone: {
        type: "phoneNumber",
        minLen: 6,
    }
}

module.exports.Validator = class Validator {

    getType(number) {
        if (number <= 2) return "namePart";
        else if (number <=  5 && number >= 4 ) return "birthPart";
        else if (number == 3) return "year";
        else if (number == 6) return "passport";
        else if (number == 7) return "car";
        else if (number == 8) return "inn";
        else if (number == 9) return "snils";
        else if (number == 10) return "telephone";
    }
    validate (type, value) {
        const t = types[type.toString()];
        if (value.match(/[!@#$%&*()_+=|<>?{}\[\]~-] | [0-9]/) !== null) return { success: false, message: "‚ùå –ü–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏!"  }
        switch (t.type) {
            case "onlyLetters":
                if (!this.validateOnlyLetters(value)) return { success: false, message: "‚ùå –í —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã ‚ùå" };
                break;
            case "number":
                if (!this.validateNumber(value)) return { success: false, message: "‚ùå –í —ç—Ç–æ–º –ø–æ–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ‚ùå" };
                break;
            case "phoneNumber": 
                if (!this.validatePhoneNumber(value)) return  { success: false, message: "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå" };
                break;
            
        }
        if(!t.headingZeroes && value.startsWith("0")) return { success: false, message: "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —ç—Ç—É –¥–∞—Ç—É –±–µ–∑ –Ω—É–ª—è –≤ –Ω–∞—á–∞–ª–µ ‚ö†Ô∏è"}
        if (t.minLen) {
            if(value.length < t.minLen) return { success: false, message: "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—è: " + t.minLen + " ‚ö†Ô∏è" }; 
        }
        if (t.len) {
            if (value.length !== t.len) return { success: false, message: "‚ö†Ô∏è –î–ª–∏–Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—è: " + t.len + " ‚ö†Ô∏è" };
        }
        if (t.maxLen) {
            if (value.length > t.maxLen ) return { success: false, message: "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—è: " + t.maxLen + " ‚ö†Ô∏è" };
        }
        
        return { success: true };
    }

    validatePhoneNumber(phone) {
        phone = phone.replace("+", "");
        return (phone.length > 6 && phone.match(/[0-9]/g).length == phone.length);
        
    }
    validateNumber (value) {
       return (value.match(/^[0-9]*$/) !== null);
    }
    validateLength(value, desiredLength, minimal) {
        if (value.trim().length !== desiredLength) {
            // check if it's minimal value 
            if (minimal && value.trim().length >= desiredLength) return true;
            else return false;
        }
        return true;
    }

    validateOnlyLetters(value) {
        return (value.match(/\D/g) !== null)
    }
}

module.exports.AskHandler = class AskHandler {
    bot;
    questions = [
        "üï¥Ô∏è –§–∞–º–∏–ª–∏—è –ª–∏—Ü–∞ (–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–µ —á—É—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)",
        "üï¥Ô∏è –ò–º—è –ª–∏—Ü–∞ (–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–µ —á—É—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)",
        "üï¥Ô∏è –û—Ç—á–µ—Å—Ç–≤–æ –ª–∏—Ü–∞ (–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–µ —á—É—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)",
        "üìÖ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ª–∏—Ü–∞ (4 —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
        "üìÖ –ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è –ª–∏—Ü–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: 3, 11)",
        "üìÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ª–∏—Ü–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: 3, 21)",
        "üìî –ü–∞—Å–ø–æ—Ä—Ç –†–§ –ª–∏—Ü–∞ (10 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
        "üöó –ì–æ—Å. –Ω–æ–º–µ—Ä –¢–° –ª–∏—Ü–∞ (–û—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤)",
        "üìÑ –°–Ω–∏–ª—Å –ª–∏—Ü–∞ (11 —Ü–∏—Ñ—Ä –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)",
        "üìÉ –ò–ù–ù –ª–∏—Ü–∞ (12 —Ü–∏—Ñ—Ä –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)",
        "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–∏—Ü–∞ (–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è \"+\" –≤ –Ω–∞—á–∞–ª–µ, –æ—Ç 6 —Ü–∏—Ñ—Ä, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)"
    ]
    constructor (botAccount) {
        this.bot = botAccount;
    }
    askQuestion(currentUserQuestion, userId) {
        this.sendWithContextKeyBoard(userId, this.questions[currentUserQuestion]);
    }

    sendWithContextKeyBoard(id, q) {
        this.bot.sendMessage(id, q, Extra.HTML().markup(Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ"]]).resize()));
    }
}